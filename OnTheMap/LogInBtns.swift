//
//  LogInBtns.swift
//  OnTheMap
//
//  Created by Cameron Laury on 3/24/17.
//  Copyright Â© 2017 com.Cameron.OnTheMap. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class LogInBtns : NSObject {

    //// Drawing Methods

    public dynamic class func drawFacebookCircleButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 67, height: 67), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 67, height: 67), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 67, y: resizedFrame.height / 67)


        //// Color Declarations
        let fillColor2 = UIColor(red: 0.227, green: 0.345, blue: 0.608, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 29.77, y: 50.32))
        bezierPath.addLine(to: CGPoint(x: 36.51, y: 50.32))
        bezierPath.addLine(to: CGPoint(x: 36.51, y: 34))
        bezierPath.addLine(to: CGPoint(x: 41.01, y: 34))
        bezierPath.addLine(to: CGPoint(x: 41.6, y: 28.37))
        bezierPath.addLine(to: CGPoint(x: 36.51, y: 28.37))
        bezierPath.addLine(to: CGPoint(x: 36.52, y: 25.56))
        bezierPath.addCurve(to: CGPoint(x: 38.76, y: 23.3), controlPoint1: CGPoint(x: 36.52, y: 24.09), controlPoint2: CGPoint(x: 36.66, y: 23.3))
        bezierPath.addLine(to: CGPoint(x: 41.57, y: 23.3))
        bezierPath.addLine(to: CGPoint(x: 41.57, y: 17.68))
        bezierPath.addLine(to: CGPoint(x: 37.07, y: 17.68))
        bezierPath.addCurve(to: CGPoint(x: 29.76, y: 25), controlPoint1: CGPoint(x: 31.67, y: 17.68), controlPoint2: CGPoint(x: 29.76, y: 20.41))
        bezierPath.addLine(to: CGPoint(x: 29.76, y: 28.37))
        bezierPath.addLine(to: CGPoint(x: 26.4, y: 28.37))
        bezierPath.addLine(to: CGPoint(x: 26.4, y: 34))
        bezierPath.addLine(to: CGPoint(x: 29.76, y: 34))
        bezierPath.addLine(to: CGPoint(x: 29.77, y: 50.32))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 34, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 34), controlPoint1: CGPoint(x: 17.43, y: 64), controlPoint2: CGPoint(x: 4, y: 50.57))
        bezierPath.addCurve(to: CGPoint(x: 34, y: 4), controlPoint1: CGPoint(x: 4, y: 17.43), controlPoint2: CGPoint(x: 17.43, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 64, y: 34), controlPoint1: CGPoint(x: 50.57, y: 4), controlPoint2: CGPoint(x: 64, y: 17.43))
        bezierPath.addCurve(to: CGPoint(x: 34, y: 64), controlPoint1: CGPoint(x: 64, y: 50.57), controlPoint2: CGPoint(x: 50.57, y: 64))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor2.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawGoogleCircleButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 67, height: 67), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 67, height: 67), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 67, y: resizedFrame.height / 67)


        //// Color Declarations
        let fillColor = UIColor(red: 0.839, green: 0.286, blue: 0.184, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 32.96, y: 35))
        bezierPath.addCurve(to: CGPoint(x: 34.7, y: 29.9), controlPoint1: CGPoint(x: 34.57, y: 33.39), controlPoint2: CGPoint(x: 34.7, y: 31.16))
        bezierPath.addCurve(to: CGPoint(x: 25.9, y: 17.03), controlPoint1: CGPoint(x: 34.7, y: 24.85), controlPoint2: CGPoint(x: 31.71, y: 17.03))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 19.34), controlPoint1: CGPoint(x: 24.09, y: 17.03), controlPoint2: CGPoint(x: 22.13, y: 17.94))
        bezierPath.addCurve(to: CGPoint(x: 19.47, y: 24.5), controlPoint1: CGPoint(x: 19.82, y: 20.8), controlPoint2: CGPoint(x: 19.47, y: 22.69))
        bezierPath.addCurve(to: CGPoint(x: 28.21, y: 36.96), controlPoint1: CGPoint(x: 19.47, y: 29.2), controlPoint2: CGPoint(x: 22.18, y: 36.96))
        bezierPath.addCurve(to: CGPoint(x: 32.96, y: 35), controlPoint1: CGPoint(x: 29.95, y: 36.96), controlPoint2: CGPoint(x: 31.83, y: 36.11))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 4, y: 34))
        bezierPath.addCurve(to: CGPoint(x: 11.13, y: 53.41), controlPoint1: CGPoint(x: 4, y: 41.41), controlPoint2: CGPoint(x: 6.68, y: 48.18))
        bezierPath.addCurve(to: CGPoint(x: 15.2, y: 49.48), controlPoint1: CGPoint(x: 11.97, y: 52), controlPoint2: CGPoint(x: 13.27, y: 50.62))
        bezierPath.addCurve(to: CGPoint(x: 28.56, y: 46.26), controlPoint1: CGPoint(x: 19.54, y: 46.81), controlPoint2: CGPoint(x: 25.4, y: 46.46))
        bezierPath.addCurve(to: CGPoint(x: 26.45, y: 41.49), controlPoint1: CGPoint(x: 27.58, y: 45), controlPoint2: CGPoint(x: 26.45, y: 43.67))
        bezierPath.addCurve(to: CGPoint(x: 27.16, y: 38.77), controlPoint1: CGPoint(x: 26.45, y: 40.3), controlPoint2: CGPoint(x: 26.81, y: 39.6))
        bezierPath.addCurve(to: CGPoint(x: 24.92, y: 38.92), controlPoint1: CGPoint(x: 26.38, y: 38.85), controlPoint2: CGPoint(x: 25.62, y: 38.92))
        bezierPath.addCurve(to: CGPoint(x: 13.31, y: 27.94), controlPoint1: CGPoint(x: 17.51, y: 38.92), controlPoint2: CGPoint(x: 13.31, y: 33.39))
        bezierPath.addCurve(to: CGPoint(x: 17.78, y: 18.56), controlPoint1: CGPoint(x: 13.31, y: 24.72), controlPoint2: CGPoint(x: 14.79, y: 21.15))
        bezierPath.addCurve(to: CGPoint(x: 30.3, y: 14.72), controlPoint1: CGPoint(x: 21.78, y: 15.28), controlPoint2: CGPoint(x: 26.53, y: 14.72))
        bezierPath.addLine(to: CGPoint(x: 44.7, y: 14.72))
        bezierPath.addLine(to: CGPoint(x: 40.23, y: 17.23))
        bezierPath.addLine(to: CGPoint(x: 35.9, y: 17.23))
        bezierPath.addCurve(to: CGPoint(x: 40.85, y: 26.68), controlPoint1: CGPoint(x: 37.51, y: 18.56), controlPoint2: CGPoint(x: 40.85, y: 21.36))
        bezierPath.addCurve(to: CGPoint(x: 35, y: 36.61), controlPoint1: CGPoint(x: 40.85, y: 31.86), controlPoint2: CGPoint(x: 37.91, y: 34.3))
        bezierPath.addCurve(to: CGPoint(x: 33.04, y: 40.03), controlPoint1: CGPoint(x: 34.07, y: 37.51), controlPoint2: CGPoint(x: 33.04, y: 38.49))
        bezierPath.addCurve(to: CGPoint(x: 34.85, y: 43.04), controlPoint1: CGPoint(x: 33.04, y: 41.56), controlPoint2: CGPoint(x: 34.07, y: 42.42))
        bezierPath.addLine(to: CGPoint(x: 37.36, y: 45))
        bezierPath.addCurve(to: CGPoint(x: 43.24, y: 54.78), controlPoint1: CGPoint(x: 40.45, y: 47.57), controlPoint2: CGPoint(x: 43.24, y: 49.95))
        bezierPath.addCurve(to: CGPoint(x: 38.86, y: 63.61), controlPoint1: CGPoint(x: 43.24, y: 57.96), controlPoint2: CGPoint(x: 41.76, y: 61.16))
        bezierPath.addCurve(to: CGPoint(x: 34.08, y: 64), controlPoint1: CGPoint(x: 37.31, y: 63.86), controlPoint2: CGPoint(x: 35.71, y: 63.99))
        bezierPath.addCurve(to: CGPoint(x: 38.54, y: 57.52), controlPoint1: CGPoint(x: 37.02, y: 62.71), controlPoint2: CGPoint(x: 38.54, y: 60.35))
        bezierPath.addCurve(to: CGPoint(x: 30.93, y: 48.27), controlPoint1: CGPoint(x: 38.54, y: 53.95), controlPoint2: CGPoint(x: 36.26, y: 52.07))
        bezierPath.addCurve(to: CGPoint(x: 29.32, y: 48.22), controlPoint1: CGPoint(x: 30.38, y: 48.22), controlPoint2: CGPoint(x: 30.02, y: 48.22))
        bezierPath.addCurve(to: CGPoint(x: 21.98, y: 49.33), controlPoint1: CGPoint(x: 28.69, y: 48.22), controlPoint2: CGPoint(x: 24.92, y: 48.35))
        bezierPath.addCurve(to: CGPoint(x: 15.98, y: 56.54), controlPoint1: CGPoint(x: 20.45, y: 49.88), controlPoint2: CGPoint(x: 15.98, y: 51.56))
        bezierPath.addCurve(to: CGPoint(x: 16.15, y: 58.11), controlPoint1: CGPoint(x: 15.98, y: 57.08), controlPoint2: CGPoint(x: 16.03, y: 57.6))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 34), controlPoint1: CGPoint(x: 8.78, y: 52.64), controlPoint2: CGPoint(x: 4, y: 43.88))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 61.73, y: 22.53))
        bezierPath.addLine(to: CGPoint(x: 61.73, y: 22.53))
        bezierPath.addCurve(to: CGPoint(x: 62.87, y: 25.81), controlPoint1: CGPoint(x: 62.17, y: 23.59), controlPoint2: CGPoint(x: 62.55, y: 24.69))
        bezierPath.addCurve(to: CGPoint(x: 61.73, y: 22.53), controlPoint1: CGPoint(x: 62.55, y: 24.69), controlPoint2: CGPoint(x: 62.17, y: 23.6))
        bezierPath.addLine(to: CGPoint(x: 61.73, y: 22.53))
        bezierPath.addLine(to: CGPoint(x: 61.73, y: 22.53))
        bezierPath.addLine(to: CGPoint(x: 61.73, y: 22.53))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 34, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 34), controlPoint1: CGPoint(x: 17.43, y: 64), controlPoint2: CGPoint(x: 4, y: 50.57))
        bezierPath.addCurve(to: CGPoint(x: 34, y: 4), controlPoint1: CGPoint(x: 4, y: 17.43), controlPoint2: CGPoint(x: 17.43, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 61.73, y: 22.53), controlPoint1: CGPoint(x: 46.51, y: 4), controlPoint2: CGPoint(x: 57.23, y: 11.65))
        bezierPath.addLine(to: CGPoint(x: 61.73, y: 22.53))
        bezierPath.addLine(to: CGPoint(x: 55.76, y: 22.53))
        bezierPath.addLine(to: CGPoint(x: 55.76, y: 14.72))
        bezierPath.addLine(to: CGPoint(x: 52.42, y: 14.72))
        bezierPath.addLine(to: CGPoint(x: 52.42, y: 22.53))
        bezierPath.addLine(to: CGPoint(x: 44.6, y: 22.53))
        bezierPath.addLine(to: CGPoint(x: 44.6, y: 25.81))
        bezierPath.addLine(to: CGPoint(x: 52.42, y: 25.81))
        bezierPath.addLine(to: CGPoint(x: 52.42, y: 33.69))
        bezierPath.addLine(to: CGPoint(x: 55.76, y: 33.69))
        bezierPath.addLine(to: CGPoint(x: 55.76, y: 25.81))
        bezierPath.addLine(to: CGPoint(x: 62.87, y: 25.81))
        bezierPath.addCurve(to: CGPoint(x: 64, y: 34), controlPoint1: CGPoint(x: 63.6, y: 28.41), controlPoint2: CGPoint(x: 64, y: 31.16))
        bezierPath.addCurve(to: CGPoint(x: 34, y: 64), controlPoint1: CGPoint(x: 64, y: 50.57), controlPoint2: CGPoint(x: 50.57, y: 64))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }




    @objc(LogInBtnsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
